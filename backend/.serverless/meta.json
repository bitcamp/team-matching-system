{
  "/Users/aryagijare/arya-data/team-matching-system/backend/serverless.yml": {
    "versionFramework": "4.11.1",
    "servicePath": "/Users/aryagijare/arya-data/team-matching-system/backend/serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "bitcamp",
      "app": "team-matching-backend",
      "service": "team-matching-backend",
      "provider": {
        "name": "aws",
        "region": "us-east-1",
        "runtime": "nodejs16.x",
        "stage": "dev",
        "environment": {
          "TEAM_MATCHING_TABLE": "team-matching-system-dev"
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:Query",
                  "dynamodb:Scan",
                  "dynamodb:GetItem",
                  "dynamodb:PutItem",
                  "dynamodb:UpdateItem",
                  "dynamodb:DeleteItem"
                ],
                "Resource": [
                  "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev",
                  "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev/*"
                ]
              },
              {
                "Effect": "Allow",
                "Action": [
                  "lambda:GetLayerVersion"
                ],
                "Resource": "arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:1"
              }
            ]
          }
        },
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "RegisterLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/team-matching-backend-dev-register"
              }
            },
            "MatchTeamsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/team-matching-backend-dev-matchTeams"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "team-matching-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/team-matching-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/team-matching-backend-dev*:*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "dynamodb:Query",
                            "dynamodb:Scan",
                            "dynamodb:GetItem",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:DeleteItem"
                          ],
                          "Resource": [
                            "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev",
                            "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev/*"
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "lambda:GetLayerVersion"
                          ],
                          "Resource": "arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:1"
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "team-matching-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "RegisterLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
                  "S3Key": "serverless/team-matching-backend/dev/1743983256048-2025-04-06T23:47:36.048Z/register.zip"
                },
                "Handler": "index.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "team-matching-backend-dev-register",
                "MemorySize": 256,
                "Timeout": 15,
                "Description": "Create or update a record in the team-matching table",
                "Environment": {
                  "Variables": {
                    "TEAM_MATCHING_TABLE": "team-matching-system-dev",
                    "SENTRY_DSN": "https://474121de6dfb4ea7973f677619e38b2d@o414418.ingest.sentry.io/5776787",
                    "SENTRY_ENVIRONMENT": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RegisterLogGroup"
              ]
            },
            "MatchTeamsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
                  "S3Key": "serverless/team-matching-backend/dev/1743983256048-2025-04-06T23:47:36.048Z/matchTeams.zip"
                },
                "Handler": "matching.lambda_handler",
                "Runtime": "python3.9",
                "FunctionName": "team-matching-backend-dev-matchTeams",
                "MemorySize": 256,
                "Timeout": 29,
                "Description": "Run team matching algorithm",
                "Environment": {
                  "Variables": {
                    "TEAM_MATCHING_TABLE": "team-matching-system-dev",
                    "SENTRY_DSN": "https://474121de6dfb4ea7973f677619e38b2d@o414418.ingest.sentry.io/5776787",
                    "SENTRY_ENVIRONMENT": "dev"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                },
                "Layers": [
                  "arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:2"
                ]
              },
              "DependsOn": [
                "MatchTeamsLogGroup"
              ]
            },
            "MatchTeamsLambdaVersion2LHVP1KfGuCqskmkHGeFcpOtyknoRvibsdbIyyXE": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "MatchTeamsLambdaFunction"
                },
                "CodeSha256": "h7F2EOnKoty2jw0ydT5uwpSKeNrHDUmyKLfrN0XAFwo=",
                "Description": "Run team matching algorithm"
              }
            },
            "RegisterLambdaVersionVbs3THVNkl8ES7OSVcysgL6c1Ak4qUzD7ZIBX3u14o": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RegisterLambdaFunction"
                },
                "CodeSha256": "h7F2EOnKoty2jw0ydT5uwpSKeNrHDUmyKLfrN0XAFwo=",
                "Description": "Create or update a record in the team-matching table"
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-team-matching-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceRegister": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "register",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMatchDashteams": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "match-teams",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRegisterOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMatchDashteamsOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchDashteams"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodRegisterPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RegisterLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RegisterLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMatchDashteamsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMatchDashteams"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "MatchTeamsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "MatchTeamsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1743983248286": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodRegisterOptions",
                "ApiGatewayMethodMatchDashteamsOptions",
                "ApiGatewayMethodRegisterPost",
                "ApiGatewayMethodMatchDashteamsGet"
              ]
            },
            "RegisterLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RegisterLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "MatchTeamsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "MatchTeamsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
              "Export": {
                "Name": "sls-team-matching-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "MatchTeamsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "MatchTeamsLambdaVersion2LHVP1KfGuCqskmkHGeFcpOtyknoRvibsdbIyyXE"
              },
              "Export": {
                "Name": "sls-team-matching-backend-dev-MatchTeamsLambdaFunctionQualifiedArn"
              }
            },
            "RegisterLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RegisterLambdaVersionVbs3THVNkl8ES7OSVcysgL6c1Ak4qUzD7ZIBX3u14o"
              },
              "Export": {
                "Name": "sls-team-matching-backend-dev-RegisterLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-team-matching-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "register": {
          "handler": "index.handler",
          "description": "Create or update a record in the team-matching table",
          "events": [
            {
              "http": {
                "path": "register",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 15,
          "name": "team-matching-backend-dev-register",
          "environment": {
            "SENTRY_DSN": "https://474121de6dfb4ea7973f677619e38b2d@o414418.ingest.sentry.io/5776787",
            "SENTRY_ENVIRONMENT": "dev"
          },
          "package": {
            "artifact": ".serverless/register.zip"
          },
          "memory": 256,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "RegisterLambdaVersionVbs3THVNkl8ES7OSVcysgL6c1Ak4qUzD7ZIBX3u14o"
        },
        "matchTeams": {
          "handler": "matching.lambda_handler",
          "runtime": "python3.9",
          "description": "Run team matching algorithm",
          "layers": [
            "arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:2"
          ],
          "events": [
            {
              "http": {
                "path": "match-teams",
                "method": "get",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "GET"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "memorySize": 256,
          "timeout": 29,
          "name": "team-matching-backend-dev-matchTeams",
          "environment": {
            "SENTRY_DSN": "https://474121de6dfb4ea7973f677619e38b2d@o414418.ingest.sentry.io/5776787",
            "SENTRY_ENVIRONMENT": "dev"
          },
          "package": {
            "artifact": ".serverless/matchTeams.zip"
          },
          "memory": 256,
          "vpc": {},
          "versionLogicalId": "MatchTeamsLambdaVersion2LHVP1KfGuCqskmkHGeFcpOtyknoRvibsdbIyyXE"
        }
      },
      "package": {
        "individually": true,
        "exclude": [
          ".git/**",
          ".serverless/**",
          "test/**",
          "node_modules/**",
          "**/*.md",
          "**/*.zip"
        ],
        "artifactsS3KeyDirname": "serverless/team-matching-backend/dev/code-artifacts",
        "deploymentBucket": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
        "artifactDirectoryName": "serverless/team-matching-backend/dev/1743983256048-2025-04-06T23:47:36.048Z"
      },
      "plugins": [
        "serverless-sentry"
      ],
      "custom": {
        "sentry": {
          "dsn": "https://474121de6dfb4ea7973f677619e38b2d@o414418.ingest.sentry.io/5776787"
        }
      }
    },
    "provider": {
      "name": "aws",
      "region": "us-east-1",
      "runtime": "nodejs16.x",
      "stage": "dev",
      "environment": {
        "TEAM_MATCHING_TABLE": "team-matching-system-dev"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem"
              ],
              "Resource": [
                "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev",
                "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev/*"
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "lambda:GetLayerVersion"
              ],
              "Resource": "arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:1"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "RegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/team-matching-backend-dev-register"
            }
          },
          "MatchTeamsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/team-matching-backend-dev-matchTeams"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "team-matching-backend",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/team-matching-backend-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/team-matching-backend-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev",
                          "arn:aws:dynamodb:us-east-1:*:table/team-matching-system-dev/*"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:GetLayerVersion"
                        ],
                        "Resource": "arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:1"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "team-matching-backend",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
                "S3Key": "serverless/team-matching-backend/dev/1743983256048-2025-04-06T23:47:36.048Z/register.zip"
              },
              "Handler": "index.handler",
              "Runtime": "nodejs16.x",
              "FunctionName": "team-matching-backend-dev-register",
              "MemorySize": 256,
              "Timeout": 15,
              "Description": "Create or update a record in the team-matching table",
              "Environment": {
                "Variables": {
                  "TEAM_MATCHING_TABLE": "team-matching-system-dev",
                  "SENTRY_DSN": "https://474121de6dfb4ea7973f677619e38b2d@o414418.ingest.sentry.io/5776787",
                  "SENTRY_ENVIRONMENT": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterLogGroup"
            ]
          },
          "MatchTeamsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
                "S3Key": "serverless/team-matching-backend/dev/1743983256048-2025-04-06T23:47:36.048Z/matchTeams.zip"
              },
              "Handler": "matching.lambda_handler",
              "Runtime": "python3.9",
              "FunctionName": "team-matching-backend-dev-matchTeams",
              "MemorySize": 256,
              "Timeout": 29,
              "Description": "Run team matching algorithm",
              "Environment": {
                "Variables": {
                  "TEAM_MATCHING_TABLE": "team-matching-system-dev",
                  "SENTRY_DSN": "https://474121de6dfb4ea7973f677619e38b2d@o414418.ingest.sentry.io/5776787",
                  "SENTRY_ENVIRONMENT": "dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:2"
              ]
            },
            "DependsOn": [
              "MatchTeamsLogGroup"
            ]
          },
          "MatchTeamsLambdaVersion2LHVP1KfGuCqskmkHGeFcpOtyknoRvibsdbIyyXE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MatchTeamsLambdaFunction"
              },
              "CodeSha256": "h7F2EOnKoty2jw0ydT5uwpSKeNrHDUmyKLfrN0XAFwo=",
              "Description": "Run team matching algorithm"
            }
          },
          "RegisterLambdaVersionVbs3THVNkl8ES7OSVcysgL6c1Ak4qUzD7ZIBX3u14o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterLambdaFunction"
              },
              "CodeSha256": "h7F2EOnKoty2jw0ydT5uwpSKeNrHDUmyKLfrN0XAFwo=",
              "Description": "Create or update a record in the team-matching table"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-team-matching-backend",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMatchDashteams": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "match-teams",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegisterOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMatchDashteamsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchDashteams"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMatchDashteamsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMatchDashteams"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": "<REDACTED>",
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MatchTeamsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MatchTeamsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1743983248286": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRegisterOptions",
              "ApiGatewayMethodMatchDashteamsOptions",
              "ApiGatewayMethodRegisterPost",
              "ApiGatewayMethodMatchDashteamsGet"
            ]
          },
          "RegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MatchTeamsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MatchTeamsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
            "Export": {
              "Name": "sls-team-matching-backend-dev-ServerlessDeploymentBucketName"
            }
          },
          "MatchTeamsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MatchTeamsLambdaVersion2LHVP1KfGuCqskmkHGeFcpOtyknoRvibsdbIyyXE"
            },
            "Export": {
              "Name": "sls-team-matching-backend-dev-MatchTeamsLambdaFunctionQualifiedArn"
            }
          },
          "RegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterLambdaVersionVbs3THVNkl8ES7OSVcysgL6c1Ak4qUzD7ZIBX3u14o"
            },
            "Export": {
              "Name": "sls-team-matching-backend-dev-RegisterLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-team-matching-backend-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "3JHVGY37mCY44lDRzx",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>",
        "$source": {
          "CREDENTIALS_CODE": "<REDACTED>"
        }
      },
      "instanceParameters": null
    },
    "error": {
      "message": "Stack:arn:aws:cloudformation:us-east-1:123574527805:stack/team-matching-backend-dev/9f0603c0-1323-11f0-9bca-0ec9fa0c1285 is in UPDATE_ROLLBACK_FAILED state and can not be updated.",
      "stack": "ServerlessError2: Stack:arn:aws:cloudformation:us-east-1:123574527805:stack/team-matching-backend-dev/9f0603c0-1323-11f0-9bca-0ec9fa0c1285 is in UPDATE_ROLLBACK_FAILED state and can not be updated.\n    at file:///Users/aryagijare/.serverless/releases/4.11.1/package/dist/sf-core.js:553:36\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async persistentRequest (file:///Users/aryagijare/.serverless/releases/4.11.1/package/dist/sf-core.js:552:1958)",
      "code": "AWS_CLOUD_FORMATION_UPDATE_STACK_VALIDATION_ERROR"
    },
    "serviceRawFile": "org: bitcamp\napp: team-matching-backend\nservice: team-matching-backend\nprovider:\n  name: aws\n  region: us-east-1\n  runtime: nodejs16.x\n  stage: ${opt:stage, 'dev'}\n  environment:\n    # Example environment variable for the DynamoDB table name\n    TEAM_MATCHING_TABLE: ${file(./config/${self:provider.stage}.json):TEAM_MATCHING_TABLE}\n  iam:\n    role:\n      statements:\n        - Effect: \"Allow\"\n          Action:\n            - dynamodb:Query\n            - dynamodb:Scan\n            - dynamodb:GetItem\n            - dynamodb:PutItem\n            - dynamodb:UpdateItem\n            - dynamodb:DeleteItem\n          Resource:\n            # Give access to *only* your table if you like:\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${file(./config/${self:provider.stage}.json):TEAM_MATCHING_TABLE}\"\n            - \"arn:aws:dynamodb:${self:provider.region}:*:table/${file(./config/${self:provider.stage}.json):TEAM_MATCHING_TABLE}/*\"\n        - Effect: \"Allow\" \n          Action:\n            - lambda:GetLayerVersion\n          Resource: \n            - arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:1\n\nfunctions:\n  register:\n    handler: index.handler\n    description: Create or update a record in the team-matching table\n    events:\n      - http:\n          path: register\n          method: post\n          cors: true\n    memorySize: 256\n    timeout: 15\n  matchTeams:\n    handler: matching.lambda_handler\n    runtime: python3.9\n    description: Run team matching algorithm\n    layers:\n      - arn:aws:lambda:us-east-1:123574527805:layer:team-matching-dev:2\n    events:\n      - http:\n          path: match-teams\n          method: get\n          cors: true\n    memorySize: 256\n    timeout: 29\n  # Add other functions here if needed\n  # e.g. matchTeams, listTeams, etc.\n# resources:\n#   Resources:\n#     TeamMatchingTable:\n#       Type: AWS::DynamoDB::Table\n#       Properties:\n#         TableName: ${file(./config/${self:provider.stage}.json):TEAM_MATCHING_TABLE}\n#         BillingMode: PAY_PER_REQUEST\n#         AttributeDefinitions:\n#           - AttributeName: email\n#             AttributeType: S\n#         KeySchema:\n#           - AttributeName: email\n#             KeyType: HASH\n#       DeletionPolicy: Retain\npackage:\n  # include:\n  #   - node_modules/**\n  individually: true\n  exclude:\n    - .git/**\n    - .serverless/**\n    - test/**\n    - node_modules/** # Already included in Lambda environment\n    - \"**/*.md\"\n    - \"**/*.zip\"\n\nplugins:\n  - serverless-sentry\n\ncustom:\n  sentry:\n    dsn: ${file(./config/${self:provider.stage}.json):SENTRY_DSN}\n",
    "command": [
      "deploy"
    ],
    "options": {
      "stage": "dev"
    },
    "orgId": "6fee829a-2d8a-4197-bc4d-a95304b2a552",
    "orgName": "bitcamp",
    "userId": "HKr7Gm4Gz15svXTbBc",
    "userName": "bitcamp",
    "serviceProviderAwsAccountId": "123574527805",
    "serviceProviderAwsCfStackName": "team-matching-backend-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:123574527805:stack/team-matching-backend-dev/9f0603c0-1323-11f0-9bca-0ec9fa0c1285",
    "serviceProviderAwsCfStackCreated": "2025-04-06T20:13:36.241Z",
    "serviceProviderAwsCfStackUpdated": "2025-04-06T23:44:43.635Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_ROLLBACK_FAILED",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "RegisterLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:123574527805:function:team-matching-backend-dev-register:44",
        "Description": "Current Lambda function version",
        "ExportName": "sls-team-matching-backend-dev-RegisterLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "MatchTeamsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:123574527805:function:team-matching-backend-dev-matchTeams:11",
        "Description": "Current Lambda function version",
        "ExportName": "sls-team-matching-backend-dev-MatchTeamsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://0ely4mx7ga.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-team-matching-backend-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-89eeb5a8-31b0",
        "ExportName": "sls-team-matching-backend-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}